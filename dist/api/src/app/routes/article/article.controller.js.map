{
  "version": 3,
  "sources": ["../../../../../../src/app/routes/article/article.controller.ts"],
  "sourcesContent": ["import { NextFunction, Request, Response, Router } from 'express';\r\nimport auth from '../auth/auth';\r\nimport {\r\n  addComment,\r\n  createArticle,\r\n  deleteArticle,\r\n  deleteComment,\r\n  favoriteArticle,\r\n  getArticle,\r\n  getArticles,\r\n  getCommentsByArticle,\r\n  getFeed,\r\n  unfavoriteArticle,\r\n  updateArticle,\r\n} from './article.service';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * Get paginated articles\r\n * @auth optional\r\n * @route {GET} /articles\r\n * @queryparam offset number of articles dismissed from the first one\r\n * @queryparam limit number of articles returned\r\n * @queryparam tag\r\n * @queryparam author\r\n * @queryparam favorited\r\n * @returns articles: list of articles\r\n */\r\nrouter.get('/articles', auth.optional, async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const result = await getArticles(req.query, req.auth?.user?.id);\r\n    res.json(result);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n/**\r\n * Get paginated feed articles\r\n * @auth required\r\n * @route {GET} /articles/feed\r\n * @returns articles list of articles\r\n */\r\nrouter.get(\r\n  '/articles/feed',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const result = await getFeed(\r\n        Number(req.query.offset),\r\n        Number(req.query.limit),\r\n        req.auth?.user?.id,\r\n      );\r\n      res.json(result);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Create article\r\n * @route {POST} /articles\r\n * @bodyparam  title\r\n * @bodyparam  description\r\n * @bodyparam  body\r\n * @bodyparam  tagList list of tags\r\n * @returns article created article\r\n */\r\nrouter.post('/articles', auth.required, async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const article = await createArticle(req.body.article, req.auth?.user?.id);\r\n    res.status(201).json({ article });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n/**\r\n * Get unique article\r\n * @auth optional\r\n * @route {GET} /article/:slug\r\n * @param slug slug of the article (based on the title)\r\n * @returns article\r\n */\r\nrouter.get(\r\n  '/articles/:slug',\r\n  auth.optional,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const article = await getArticle(req.params.slug, req.auth?.user?.id);\r\n      res.json({ article });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Update article\r\n * @auth required\r\n * @route {PUT} /articles/:slug\r\n * @param slug slug of the article (based on the title)\r\n * @bodyparam title new title\r\n * @bodyparam description new description\r\n * @bodyparam body new content\r\n * @returns article updated article\r\n */\r\nrouter.put(\r\n  '/articles/:slug',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const article = await updateArticle(req.body.article, req.params.slug, req.auth?.user?.id);\r\n      res.json({ article });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Delete article\r\n * @auth required\r\n * @route {DELETE} /article/:id\r\n * @param slug slug of the article\r\n */\r\nrouter.delete(\r\n  '/articles/:slug',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await deleteArticle(req.params.slug, req.auth?.user!.id);\r\n      res.sendStatus(204);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Get comments from an article\r\n * @auth optional\r\n * @route {GET} /articles/:slug/comments\r\n * @param slug slug of the article (based on the title)\r\n * @returns comments list of comments\r\n */\r\nrouter.get(\r\n  '/articles/:slug/comments',\r\n  auth.optional,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const comments = await getCommentsByArticle(req.params.slug, req.auth?.user?.id);\r\n      res.json({ comments });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Add comment to article\r\n * @auth required\r\n * @route {POST} /articles/:slug/comments\r\n * @param slug slug of the article (based on the title)\r\n * @bodyparam body content of the comment\r\n * @returns comment created comment\r\n */\r\nrouter.post(\r\n  '/articles/:slug/comments',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const comment = await addComment(req.body.comment.body, req.params.slug, req.auth?.user?.id);\r\n      res.json({ comment });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Delete comment\r\n * @auth required\r\n * @route {DELETE} /articles/:slug/comments/:id\r\n * @param slug slug of the article (based on the title)\r\n * @param id id of the comment\r\n */\r\nrouter.delete(\r\n  '/articles/:slug/comments/:id',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await deleteComment(Number(req.params.id), req.auth?.user?.id);\r\n      res.status(200).json({});\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Favorite article\r\n * @auth required\r\n * @route {POST} /articles/:slug/favorite\r\n * @param slug slug of the article (based on the title)\r\n * @returns article favorited article\r\n */\r\nrouter.post(\r\n  '/articles/:slug/favorite',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const article = await favoriteArticle(req.params.slug, req.auth?.user?.id);\r\n      res.json({ article });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * Unfavorite article\r\n * @auth required\r\n * @route {DELETE} /articles/:slug/favorite\r\n * @param slug slug of the article (based on the title)\r\n * @returns article unfavorited article\r\n */\r\nrouter.delete(\r\n  '/articles/:slug/favorite',\r\n  auth.required,\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const article = await unfavoriteArticle(req.params.slug, req.auth?.user?.id);\r\n      res.json({ article });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport default router;\r\n"],
  "mappings": "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",
  "names": ["auth"]
}
