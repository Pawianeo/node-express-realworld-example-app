{
  "version": 3,
  "sources": ["../../../../../../src/app/routes/auth/auth.service.ts"],
  "sourcesContent": ["import * as bcrypt from 'bcryptjs';\r\nimport { RegisterInput } from './register-input.model';\r\nimport prisma from '../../../prisma/prisma-client';\r\nimport HttpException from '../../models/http-exception.model';\r\nimport { RegisteredUser } from './registered-user.model';\r\nimport generateToken from './token.utils';\r\nimport { User } from './user.model';\r\n\r\nconst checkUserUniqueness = async (email: string, username: string) => {\r\n  const existingUserByEmail = await prisma.user.findUnique({\r\n    where: {\r\n      email,\r\n    },\r\n    select: {\r\n      id: true,\r\n    },\r\n  });\r\n\r\n  const existingUserByUsername = await prisma.user.findUnique({\r\n    where: {\r\n      username,\r\n    },\r\n    select: {\r\n      id: true,\r\n    },\r\n  });\r\n\r\n  if (existingUserByEmail || existingUserByUsername) {\r\n    throw new HttpException(422, {\r\n      errors: {\r\n        ...(existingUserByEmail ? { email: ['has already been taken'] } : {}),\r\n        ...(existingUserByUsername ? { username: ['has already been taken'] } : {}),\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const createUser = async (input: RegisterInput): Promise<RegisteredUser> => {\r\n  const email = input.email?.trim();\r\n  const username = input.username?.trim();\r\n  const password = input.password?.trim();\r\n  const { image, bio, demo } = input;\r\n\r\n  if (!email) {\r\n    throw new HttpException(422, { errors: { email: [\"can't be blank\"] } });\r\n  }\r\n\r\n  if (!username) {\r\n    throw new HttpException(422, { errors: { username: [\"can't be blank\"] } });\r\n  }\r\n\r\n  if (!password) {\r\n    throw new HttpException(422, { errors: { password: [\"can't be blank\"] } });\r\n  }\r\n\r\n  await checkUserUniqueness(email, username);\r\n\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n  const user = await prisma.user.create({\r\n    data: {\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n      ...(image ? { image } : {}),\r\n      ...(bio ? { bio } : {}),\r\n      ...(demo ? { demo } : {}),\r\n    },\r\n    select: {\r\n      id: true,\r\n      email: true,\r\n      username: true,\r\n      bio: true,\r\n      image: true,\r\n    },\r\n  });\r\n\r\n  return {\r\n    ...user,\r\n    token: generateToken(user.id),\r\n  };\r\n};\r\n\r\nexport const login = async (userPayload: any) => {\r\n  const email = userPayload.email?.trim();\r\n  const password = userPayload.password?.trim();\r\n\r\n  if (!email) {\r\n    throw new HttpException(422, { errors: { email: [\"can't be blank\"] } });\r\n  }\r\n\r\n  if (!password) {\r\n    throw new HttpException(422, { errors: { password: [\"can't be blank\"] } });\r\n  }\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: {\r\n      email,\r\n    },\r\n    select: {\r\n      id: true,\r\n      email: true,\r\n      username: true,\r\n      password: true,\r\n      bio: true,\r\n      image: true,\r\n    },\r\n  });\r\n\r\n  if (user) {\r\n    const match = await bcrypt.compare(password, user.password);\r\n\r\n    if (match) {\r\n      return {\r\n        email: user.email,\r\n        username: user.username,\r\n        bio: user.bio,\r\n        image: user.image,\r\n        token: generateToken(user.id),\r\n      };\r\n    }\r\n  }\r\n\r\n  throw new HttpException(403, {\r\n    errors: {\r\n      'email or password': ['is invalid'],\r\n    },\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = async (id: number) => {\r\n  const user = (await prisma.user.findUnique({\r\n    where: {\r\n      id,\r\n    },\r\n    select: {\r\n      id: true,\r\n      email: true,\r\n      username: true,\r\n      bio: true,\r\n      image: true,\r\n    },\r\n  })) as User;\r\n\r\n  return {\r\n    ...user,\r\n    token: generateToken(user.id),\r\n  };\r\n};\r\n\r\nexport const updateUser = async (userPayload: any, id: number) => {\r\n  const { email, username, password, image, bio } = userPayload;\r\n  let hashedPassword;\r\n\r\n  if (password) {\r\n    hashedPassword = await bcrypt.hash(password, 10);\r\n  }\r\n\r\n  const user = await prisma.user.update({\r\n    where: {\r\n      id: id,\r\n    },\r\n    data: {\r\n      ...(email ? { email } : {}),\r\n      ...(username ? { username } : {}),\r\n      ...(password ? { password: hashedPassword } : {}),\r\n      ...(image ? { image } : {}),\r\n      ...(bio ? { bio } : {}),\r\n    },\r\n    select: {\r\n      id: true,\r\n      email: true,\r\n      username: true,\r\n      bio: true,\r\n      image: true,\r\n    },\r\n  });\r\n\r\n  return {\r\n    ...user,\r\n    token: generateToken(user.id),\r\n  };\r\n};\r\n"],
  "mappings": "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",
  "names": ["prisma", "HttpException", "generateToken"]
}
