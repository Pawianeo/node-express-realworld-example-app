{
  "version": 3,
  "sources": ["../../../../src/prisma/seed.ts"],
  "sourcesContent": ["import {\r\n  randEmail,\r\n  randFullName,\r\n  randLines,\r\n  randParagraph,\r\n  randPassword, randPhrase,\r\n  randWord\r\n} from '@ngneat/falso';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { RegisteredUser } from '../app/routes/auth/registered-user.model';\r\nimport { createUser } from '../app/routes/auth/auth.service';\r\nimport { addComment, createArticle } from '../app/routes/article/article.service';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const generateUser = async (): Promise<RegisteredUser> =>\r\n  createUser({\r\n    username: randFullName(),\r\n    email: randEmail(),\r\n    password: randPassword(),\r\n    image: 'https://api.realworld.io/images/demo-avatar.png',\r\n    demo: true,\r\n  });\r\n\r\nexport const generateArticle = async (id: number) =>\r\n  createArticle(\r\n    {\r\n      title: randPhrase(),\r\n      description: randParagraph(),\r\n      body: randLines({ length: 10 }).join(' '),\r\n      tagList: randWord({ length: 4 }),\r\n    },\r\n    id,\r\n  );\r\n\r\nexport const generateComment = async (id: number, slug: string) =>\r\n  addComment(randParagraph(), slug, id);\r\n\r\nconst main = async () => {\r\n  try {\r\n    const users = await Promise.all(Array.from({length: 12}, () => generateUser()));\r\n    users?.map(user => user);\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for await (const user of users) {\r\n      const articles = await Promise.all(Array.from({length: 12}, () => generateArticle(user.id)));\r\n\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      for await (const article of articles) {\r\n        await Promise.all(users.map(userItem => generateComment(userItem.id, article.slug)));\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n\r\n  }\r\n};\r\n\r\nmain()\r\n  .then(async () => {\r\n    await prisma.$disconnect();\r\n  })\r\n  .catch(async () => {\r\n    await prisma.$disconnect();\r\n    process.exit(1);\r\n  });\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOO;AACP,oBAA6B;AAE7B,kBAA2B;AAC3B,qBAA0C;AAE1C,MAAM,SAAS,IAAI,2BAAa;AAEzB,MAAM,eAAe,gBAC1B,wBAAW;AAAA,EACT,cAAU,2BAAa;AAAA,EACvB,WAAO,wBAAU;AAAA,EACjB,cAAU,2BAAa;AAAA,EACvB,OAAO;AAAA,EACP,MAAM;AACR,CAAC;AAEI,MAAM,kBAAkB,OAAO,WACpC;AAAA,EACE;AAAA,IACE,WAAO,yBAAW;AAAA,IAClB,iBAAa,4BAAc;AAAA,IAC3B,UAAM,wBAAU,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAK,GAAG;AAAA,IACxC,aAAS,uBAAS,EAAE,QAAQ,EAAE,CAAC;AAAA,EACjC;AAAA,EACA;AACF;AAEK,MAAM,kBAAkB,OAAO,IAAY,aAChD,+BAAW,4BAAc,GAAG,MAAM,EAAE;AAEtC,MAAM,OAAO,YAAY;AACvB,MAAI;AACF,UAAM,QAAQ,MAAM,QAAQ,IAAI,MAAM,KAAK,EAAC,QAAQ,GAAE,GAAG,MAAM,aAAa,CAAC,CAAC;AAC9E,WAAO,IAAI,UAAQ,IAAI;AAGvB,qBAAiB,QAAQ,OAAO;AAC9B,YAAM,WAAW,MAAM,QAAQ,IAAI,MAAM,KAAK,EAAC,QAAQ,GAAE,GAAG,MAAM,gBAAgB,KAAK,EAAE,CAAC,CAAC;AAG3F,uBAAiB,WAAW,UAAU;AACpC,cAAM,QAAQ,IAAI,MAAM,IAAI,cAAY,gBAAgB,SAAS,IAAI,QAAQ,IAAI,CAAC,CAAC;AAAA,MACrF;AAAA,IACF;AAAA,EACF,SAAS,GAAG;AACV,YAAQ,MAAM,CAAC;AAAA,EAEjB;AACF;AAEA,KAAK,EACF,KAAK,YAAY;AAChB,QAAM,OAAO,YAAY;AAC3B,CAAC,EACA,MAAM,YAAY;AACjB,QAAM,OAAO,YAAY;AACzB,UAAQ,KAAK,CAAC;AAChB,CAAC;",
  "names": []
}
